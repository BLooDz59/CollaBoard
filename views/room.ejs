<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/inc/css/custom.css" />
    <link rel="stylesheet" href="https://llespinasse.com/fonts/circular-std/stylesheet.css" />
    <title>Collaboard</title>
</head>
<body>
    <header class="site-header">
        <h1 class="clbrd-page-title">Collaboard</h1>
    </header>
    <main class="clbrd-wrapper">
        <!-- CANVAS -->
        <div class="clbrd-wrapper__canva" id="canvasWrapper">
            <canvas id="canvas"></canvas>
            <!-- undo & redo arrows -->
            <div class="arrows-container">
                <img src="/inc/assets/pictos/undo.svg" alt="Undo" onclick="undo()"/>
                <img src="/inc/assets/pictos/redo.svg" alt="Redo" onclick="redo()"/>
            </div>
            <!-- color & thickness picker -->
            <div class="picker">
                <div class="picker__thickness">
                    <div class="circle" onclick="changeSize(3)"><span class="thin"></span></div>
                    <div class="circle" onclick="changeSize(6)"><span class="regular"></span></div>
                    <div class="circle" onclick="changeSize(12)"><span class="medium"></span></div>
                    <div class="circle" onclick="changeSize(25)"><span class="bold"></span></div>
                </div>
                <div class="picker__colors">
                    <div class="circle red" onclick="changeColor('red')"></div>
                    <div class="circle blue" onclick="changeColor('blue')"></div>
                    <div class="circle green" onclick="changeColor('green')"></div>
                    <div class="circle yellow" onclick="changeColor('yellow')"></div>
                </div>
            </div>
            <div class="drop-shadow"></div>
        </div>
         <!-- TOOLS  -->
        <div class="clbrd-wrapper__tools">
            <h2 class="clbrd-page-subtitle">Tools</h2>
            <ul id="tools-list">
                <li id="pencil" class="tools__item active" onclick="changeTool('pencil')"><img src="/inc/assets/pictos/pencil.svg" /> pencil</li>
                <li id="highlighter" class="tools__item" onclick="changeTool('highlighter')"><img src="/inc/assets/pictos/highlight.svg" /> highlight</li>
                <li id="eraser" class="tools__item" onclick="changeTool('eraser')"><img src="/inc/assets/pictos/eraser.svg" /> eraser</li>
                <li id="laser" class="tools__item" onclick="changeTool('laser')"><img src="/inc/assets/pictos/laser.svg" /> laser</li>
            </ul>
            <button id="shareBtn" onclick="copyInvitationLink()">Share Link</button>
        </div>

    </main>
    <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io();
            const roomId = "<%= roomId %>"

            const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            const bounds = canvas.getBoundingClientRect();

            var undoStates = [];
            var redoStates = [];
            var currentState = getCanvasState();

            var isDrawing = false;
            var mouseX = 0;
            var mouseY = 0;

            var tool = {
                name: 'pencil',
                size: 10,
                color: 'black'
            }

            setup();

            socket.on('toolUpdate', (data) => {
                tool[data.key] = data.value;
            })

            socket.on('request-context', (writerID) => {
                if(socket.id == writerID) {
                    var data = {
                        canvas: canvas.toDataURL(),
                        tool: tool
                    }
                    socket.emit('sending-context', roomId, data);
                } 
            })
            
            socket.on('sending-context', (data) => {
                renderCanvasState(data.canvas);
                changeSize(data.tool.size);
                changeColor(data.tool.color);
                changeTool(data.tool.name);
            });
            
            socket.on('draw', (data) => {
                ctx.beginPath();
                if(tool.name == 'pencil' || tool.name == 'eraser') {
                    ctx.ellipse(data.x, data.y, tool.size, tool.size, 0, 0, 2 * Math.PI);
                }
                if(tool.name == 'highlighter') {
                    ctx.rect(data.x, data.y, tool.size, tool.size-5);
                }
                ctx.fillStyle = tool.color;
                ctx.fill();
                ctx.closePath();
            });
            
            canvas.addEventListener('mousedown', (e) => {
                isDrawing = true;
                updateMousePosition(e);
            });
            
            canvas.addEventListener('mousemove', (e) => {
                if(isDrawing) {
                    emitEvent('draw', { x: mouseX, y: mouseY });
                    updateMousePosition(e);
                }
            });
            
            canvas.addEventListener('mouseup', (e) => {
                if(isDrawing) {
                    isDrawing = false;
                    emitEvent('draw', { x: mouseX, y: mouseY });
                    resetMousePosition();
                    addUndoState(currentState);
                    currentState = getCanvasState();
                }
            });

            function changeSize(size) {
                emitEvent('toolUpdate', { key: 'size', value: size });
            }

            function changeColor(color) {
                if (tool.name != 'eraser') emitEvent('toolUpdate', { key: 'color', value: color });
            }

            function changeTool(name) {
                updateActiveToolUI(name);
                switch (name) {
                    case 'eraser':
                        changeColor('white');
                        break;
                    case 'laser':
                        changeColor('red');
                        break;
                    default:
                        changeColor('black');
                        break;
            
                }
                emitEvent('toolUpdate', { key: 'name', value: name })
            }

            function setup() {
                socket.emit('new-user', roomId);
                socket.emit('synchronize', roomId);
    
                canvas.width = document.getElementById('canvasWrapper').clientWidth;
                canvas.height = document.getElementById('canvasWrapper').clientHeight;
            }

            function copyInvitationLink() {
                const el = document.createElement('textarea');
                el.value = "http://localhost:3000/" + roomId;
                el.setAttribute('readonly', '');
                el.style.position = 'absolute';
                el.style.left = '-9999px';
                document.body.appendChild(el);
                el.select();
                document.execCommand('copy');
                document.body.removeChild(el);
            }
            
            function undo() {
                if(undoStates.length > 0) {
                    addRedoState(getCanvasState());
                    var state = undoStates.pop();
                    currentState = state;
                    renderCanvasState(state);
                }
            }

            function redo() {
                if(redoStates.length > 0) {
                    addUndoState(getCanvasState())
                    var futurState = redoStates.pop();
                    currentState = futurState;
                    renderCanvasState(futurState);
                }
            }

            function renderCanvasState(state) {
                var img = new Image();
                img.src = state;
                img.onload = function() { 
                    ctx.clearRect(0,0,canvas.width,canvas.height);
                    ctx.drawImage(img,0,0);
                };
            }

            function getCanvasState() {
                return canvas.toDataURL();
            }

            function emitEvent(eventName, data) {
                socket.emit(eventName, roomId, data);
            }
            
            function updateMousePosition(evt) {
                mouseX = evt.clientX - bounds.left;
                mouseY = evt.clientY - bounds.top;
            }

            function resetMousePosition() {
                mouseX = 0;
                mouseY = 0;
            }

            function addUndoState(state) {
                undoStates.push(state);
            }

            function addRedoState(state) {
                redoStates.push(state);
            }

            function updateActiveToolUI(tool) {
                document.getElementById('tools-list').childNodes.forEach(element => {
                    if(element.nodeType == 1 ) {
                        element.classList.remove('active');
                    }
                });
                document.getElementById(tool).classList.add('active');
            }
        </script>
</body>
</html>